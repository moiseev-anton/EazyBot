import logging
from datetime import date, timedelta
from typing import Callable, Optional

from dto import DateSpanDTO, FacultyDTO, GroupDTO, LessonDTO, SubscriptionDTO, TeacherDTO, UserDTO
from dto.base_dto import SubscriptableDTO

logger = logging.getLogger(__name__)


class LessonFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ –≤ —Ç–µ–∫—Å—Ç"""

    @staticmethod
    def emoji_for_number(number: int) -> str:
        mapping = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£"
        }
        return mapping.get(number, str(number))

    @classmethod
    def format_for_group(cls, lesson: LessonDTO) -> str:
        lines = [
            f"{cls.emoji_for_number(lesson.number)}  <b>{lesson.startTime[:5]}</b>   üìç{lesson.classroom or '-'}",
            f"<b>{lesson.subject}</b>",
            (f"{lesson.subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞" if lesson.subgroup and lesson.subgroup != "0" else None),
            f"<i>{lesson.teacher.short_name}</i>" if lesson.teacher else None,
        ]
        return "\n".join(filter(None, lines))

    @classmethod
    def format_for_teacher(cls, lesson: LessonDTO) -> str:
        lines = [
            f"{cls.emoji_for_number(lesson.number)}  <b>{lesson.startTime[:5]}</b>   üìç{lesson.classroom or '-'}",
            f"<b>{lesson.subject}</b>",
            (f"{lesson.subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞" if lesson.subgroup and lesson.subgroup != "0" else None),
            f"<i>{lesson.group.title}</i>" if lesson.group else None,
        ]
        return "\n".join(filter(None, lines))


class ScheduleMessageBuilder:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    _FORMATTERS: dict[type, Callable[[LessonDTO], str]] = {
        GroupDTO: LessonFormatter.format_for_group,
        TeacherDTO: LessonFormatter.format_for_teacher,
    }

    _WEEKDAYS_RU = {
        0: "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        1: "–í–¢–û–†–ù–ò–ö",
        2: "–°–†–ï–î–ê",
        3: "–ß–ï–¢–í–ï–†–ì",
        4: "–ü–Ø–¢–ù–ò–¶–ê",
        5: "–°–£–ë–ë–û–¢–ê",
        6: "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
    }

    @classmethod
    def build_schedule(
            cls,
            target_obj: SubscriptableDTO,
            lessons: list[LessonDTO],
            date_range: DateSpanDTO,
    ) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        formatter = cls._resolve_formatter(target_obj)
        title = getattr(target_obj, "button_name", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

        grouped = cls._group_by_date(lessons)

        lines = [f"üóìÔ∏è <b>{title}</b>", ""]

        for current_date in cls._iter_dates(date_range):
            lines.append(cls._format_date(current_date))
            day_lessons = grouped.get(current_date.isoformat())
            if not day_lessons:
                lines.append("<i>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</i>\n")
                continue

            formatted_lessons = [formatter(lesson) for lesson in sorted(day_lessons, key=lambda l: l.number)]
            lines.append(f"<blockquote>{'\n\n'.join(formatted_lessons)}</blockquote>\n")

        return "\n".join(lines).strip()

    @staticmethod
    def _resolve_formatter(target_obj: SubscriptableDTO) -> Callable[[LessonDTO], str]:
        for cls_type, func in ScheduleMessageBuilder._FORMATTERS.items():
            if isinstance(target_obj, cls_type):
                return func
        raise TypeError(f"No formatter found for type {type(target_obj)}")

    @staticmethod
    def _group_by_date(lessons: list[LessonDTO]) -> dict[str, list[LessonDTO]]:
        grouped = {}
        for lesson in lessons:
            grouped.setdefault(lesson.date, []).append(lesson)
        return grouped

    @classmethod
    def _iter_dates(cls, date_range: DateSpanDTO):
        current = date_range.start
        while current <= date_range.end:
            yield current
            current += timedelta(days=1)

    @classmethod
    def _format_date(cls, day: date) -> str:
        weekday = cls._WEEKDAYS_RU[day.weekday()]
        return f"<b>{weekday}</b> {day.strftime('%d.%m.%Y')}"


class MessageManager:
    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
    WELCOME_NEW = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!üëã\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    WELCOME_BACK = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üëã"

    AUTH_MESSAGES = {
        "authenticated": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ‚Ü©",
        "failed": "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
    }

    # === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
    FACULTY_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    _GRADE_CHOOSING = "{faculty_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    _GROUPS_CHOOSING = "{faculty_title}\n{grade} –∫—É—Ä—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"

    LETTER_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:"
    TEACHERS_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"

    # === –≠–∫—Ä–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) ===
    _SELECTED_TEMPLATE = ("{label}:\n"
                          "<b>{display_name}</b>"
                          "{subscribed_note}")

    _TYPE_LABELS = {GroupDTO: "–ì—Ä—É–ø–ø–∞", TeacherDTO: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"}

    _SUBSCRIBED_NOTE = "\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    # === –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ===
    ALREADY_HAS_SUBSCRIPTION_WARNING = (
        "‚ùó –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )

    # === O–®–ò–ë–ö–ò ===
    ERROR_DEFAULT = "‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    @classmethod
    def get_start_message(
            cls,
            user: UserDTO,
            is_created: bool,
            nonce_status: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        auth_message = cls.AUTH_MESSAGES.get(nonce_status, "") if nonce_status else ""

        if not is_created and auth_message:
            return auth_message

        name = user.first_name
        welcome = (
            cls.WELCOME_NEW.format(name=name)
            if is_created
            else cls.WELCOME_BACK.format(name=name)
        )

        return f"{welcome}\n\n{auth_message}" if auth_message else welcome

    @staticmethod
    def get_main_message(user: UserDTO) -> str:
        lines = [
            f"üë§ <b>{f"{user.first_name} {user.last_name}"}</b>",
            f"üîπ <i>{user.username}</i>\n",
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"
        ]
        if user.subscriptions:
            for sub in user.subscriptions:
                lines.append(f"‚≠êÔ∏è <b>{sub.button_name}</b>")
        else:
            lines.append(f"<b>‚òÜ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</b>")

        return "\n".join(lines)

    @classmethod
    def get_grade_choosing_msg(cls, faculty: FacultyDTO) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        return cls._GRADE_CHOOSING.format(faculty_title=faculty.title)

    @classmethod
    def get_group_choosing_msg(cls, faculty: FacultyDTO, grade: int) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞."""
        return cls._GROUPS_CHOOSING.format(
            faculty_title=faculty.title, grade=grade
        )

    @classmethod
    def get_selected_msg(
            cls,
            obj: SubscriptableDTO,
            subscription: Optional[SubscriptionDTO] = None
    ) -> str:
        label = cls._TYPE_LABELS.get(type(obj), "–í—ã–±—Ä–∞–Ω–æ")
        subscribed_note = cls._SUBSCRIBED_NOTE if subscription is not None else ""
        return cls._SELECTED_TEMPLATE.format(
            label=label,
            display_name=obj.display_name,
            subscribed_note=subscribed_note,
        )

    @staticmethod
    def format_schedule(target_obj: SubscriptableDTO, lessons: list[LessonDTO], date_range: DateSpanDTO) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        return ScheduleMessageBuilder.build_schedule(target_obj, lessons, date_range)
