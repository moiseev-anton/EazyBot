import logging
from collections import defaultdict
from dataclasses import dataclass
from datetime import datetime
from typing import Any, Dict, Optional

from jsonapi_client.document import Document

from dto import FacultyDTO, GroupDTO, SubscriptionDTO, TeacherDTO, UserDTO
from dto.base_dto import SubscriptableDTO

logger = logging.getLogger(__name__)


@dataclass
class PeriodDTO:
    lesson_number: int
    date: str
    start_time: str
    end_time: str


@dataclass
class LessonDTO:
    period: PeriodDTO
    group: str
    subgroup: str
    subject: str
    classroom: str
    teacher: TeacherDTO

    def __post_init__(self):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç—ã Period –∏ Teacher
        if isinstance(self.period, dict):
            self.period = PeriodDTO(**self.period)
        if isinstance(self.teacher, dict):
            self.teacher = TeacherDTO(**self.teacher)

    def format_time(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —É—Ä–æ–∫–∞"""
        return self.period.start_time[:5]  # HH:MM

    def format_subgroup(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
        return f"{self.subgroup} –ø–æ–¥–≥—Ä—É–ø–ø–∞" if self.subgroup != "0" else None

    def format_for_group(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        lines = [
            f"{self._get_emoji()}  <b>{self.format_time()}</b>   üìç{self.classroom or '-'}",
            f"<b>{self.subject}</b>",
            self.format_subgroup(),
            f"<i>{self.teacher.short_name}</i>" if self.teacher else None
        ]
        return "\n".join(filter(None, lines))

    def format_for_teacher(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        lines = [
            f"{self._get_emoji()}  <b>{self.format_time()}</b>   üìç{self.classroom or '-'}",
            f"<b>{self.subject}</b>",
            self.format_subgroup(),
            f"<i>{self.group}</i>"
        ]
        return "\n".join(filter(None, lines))

    def _get_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞"""
        emoji_map = {
            1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£"
        }
        return emoji_map.get(self.period.lesson_number, str(self.period.lesson_number))


class ScheduleMessageBuilder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    EMPTY_SCHEDULE = "üìÖ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç"

    _WEEKDAYS_RU = {
        0: "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
        1: "–í–¢–û–†–ù–ò–ö",
        2: "–°–†–ï–î–ê",
        3: "–ß–ï–¢–í–ï–†–ì",
        4: "–ü–Ø–¢–ù–ò–¶–ê",
        5: "–°–£–ë–ë–û–¢–ê",
        6: "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
    }

    @classmethod
    def _format_date(cls, date_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –î–î.–ú–ú.–ì–ì–ì–ì"""
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        day_name = cls._WEEKDAYS_RU[date_obj.weekday()]
        date_formatted = date_obj.strftime("%d.%m.%Y")
        return f"<b>{day_name}</b> {date_formatted}"

    @classmethod
    def build_schedule(
            cls,
            title: str,
            lessons_doc: Document,
            for_teacher: bool = False
    ) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        lessons = lessons_doc.resources

        if not lessons:
            return cls.EMPTY_SCHEDULE  # –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç

        # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–∞—Ç–µ
        grouped = defaultdict(list)
        for lesson in lessons:
            grouped[lesson.date].append(lesson)

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(grouped.keys())

        message_lines = [f"üóìÔ∏è <b>{title}</b>", ""]

        for date_str in sorted_dates:
            message_lines.append(cls._format_date(date_str))

            lessons_for_day = grouped[date_str]

            lessons = [LessonDTO(**lesson_data) for lesson_data in day["lessons"]]
            formatted_lessons = [
                lesson.format_for_teacher() if for_teacher else lesson.format_for_group()
                for lesson in lessons
            ]

            message_lines.append(f"<blockquote>{'\n\n'.join(formatted_lessons)}</blockquote>")
            message_lines.append("")

        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return "\n".join(message_lines[:-1])


class MessageManager:
    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
    WELCOME_NEW = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!üëã\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    WELCOME_BACK = "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üëã"

    AUTH_MESSAGES = {
        "authenticated": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ ‚Ü©",
        "failed": "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
    }

    # === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
    FACULTY_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:"
    _GRADE_CHOOSING = "{faculty_title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:"
    _GROUPS_CHOOSING = "{faculty_title}\n{grade} –∫—É—Ä—Å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"

    LETTER_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É:"
    TEACHERS_CHOOSING = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"

    # === –≠–∫—Ä–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–≥—Ä—É–ø–ø–∞/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) ===
    _SELECTED_TEMPLATE = ("{label}:\n"
                          "<b>{display_name}</b>"
                          "{subscribed_note}")

    _TYPE_LABELS = {GroupDTO: "–ì—Ä—É–ø–ø–∞", TeacherDTO: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"}

    _SUBSCRIBED_NOTE = "\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã"

    # === –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ===
    ALREADY_HAS_SUBSCRIPTION_WARNING = (
        "‚ùó –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
        "–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )

    # === O–®–ò–ë–ö–ò ===
    ERROR_DEFAULT = "‚ö† –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    @classmethod
    def get_start_message(
            cls,
            user: UserDTO,
            is_created: bool,
            nonce_status: Optional[str] = None
    ) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        auth_message = cls.AUTH_MESSAGES.get(nonce_status, "") if nonce_status else ""

        if not is_created and auth_message:
            return auth_message

        name = user.first_name
        welcome = (
            cls.WELCOME_NEW.format(name=name)
            if is_created
            else cls.WELCOME_BACK.format(name=name)
        )

        return f"{welcome}\n\n{auth_message}" if auth_message else welcome

    @staticmethod
    def get_main_message(user: UserDTO) -> str:
        lines = [
            f"üë§ <b>{f"{user.first_name} {user.last_name}"}</b>",
            f"üîπ <i>{user.username}</i>\n",
        ]
        if user.subscriptions:
            for sub in user.subscriptions:
                lines.append(f"‚≠êÔ∏è <b>{sub.button_name}</b>")
        else:
            lines.append(f"<b>‚òÜ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</b>")

        return "\n".join(lines)

    @classmethod
    def get_grade_choosing_msg(cls, faculty: FacultyDTO) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞."""
        return cls._GRADE_CHOOSING.format(faculty_title=faculty.title)

    @classmethod
    def get_group_choosing_msg(cls, faculty: FacultyDTO, grade: int) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –∏ –∫—É—Ä—Å–∞."""
        return cls._GROUPS_CHOOSING.format(
            faculty_title=faculty.title, grade=grade
        )

    @classmethod
    def get_selected_msg(
            cls,
            obj: SubscriptableDTO,
            subscription: Optional[SubscriptionDTO] = None
    ) -> str:
        label = cls._TYPE_LABELS.get(type(obj), "–í—ã–±—Ä–∞–Ω–æ")
        subscribed_note = cls._SUBSCRIBED_NOTE if subscription is not None else ""
        return cls._SELECTED_TEMPLATE.format(
            label=label,
            display_name=obj.display_name,
            subscribed_note=subscribed_note,
        )

    @staticmethod
    def format_group_schedule(group_title: str, schedule_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        return ScheduleMessageBuilder.build_schedule(group_title, schedule_data)

    @staticmethod
    def format_teacher_schedule(teacher_name: str, schedule_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
        return ScheduleMessageBuilder.build_schedule(teacher_name, schedule_data, for_teacher=True)
