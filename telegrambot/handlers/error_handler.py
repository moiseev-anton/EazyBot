import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, ErrorEvent

from exceptions import StateExpiredError
from handlers.main_handler import main_handler
from managers import KeyboardManager, MessageManager

logger = logging.getLogger(__name__)
router = Router()


@router.error(StateExpiredError)
async def state_expired_error(event: ErrorEvent, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º callback (–∏–ª–∏ message) –∏–∑ event.update
    update = event.update
    callback: CallbackQuery = update.callback_query

    # 3. –†–µ–∞–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer(
        "üòÖ –£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞!",
        show_alert=True,
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await main_handler(callback, state)


@router.error()
async def handle_error(callback: types.CallbackQuery, state: FSMContext, message: str = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    error_text = MessageManager.ERROR_DEFAULT()
    text = message if message else error_text

    await callback.message.edit_text(
        text,
        reply_markup=KeyboardManager.home
    )
    await callback.answer()

    logger.warning(f"Error handled: {text}")
